{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","input","setInput","todos","setTodos","todoSetter","data","saveTodos","item","localStorage","setItem","JSON","stringify","useEffect","getItem","parse","getTodos","onClick","value","id","length","todo","done","time","Date","getDate","date","getHours","getMinutes","getMonth","getFullYear","className","onKeyDown","event","key","onChange","target","placeholder","map","each","searchedTodo","filter","index","indexOf","updatedTodos","setTodoDone","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAsIeA,MA1Hf,WAAe,MAGeC,mBAAS,IAHxB,mBAGJC,EAHI,KAGGC,EAHH,OAKeF,mBAAmC,IALlD,mBAKJG,EALI,KAKGC,EALH,KAQLC,EAAa,SAACC,GAChBF,EAASE,GACTC,EAAUD,IAaRC,EAAY,SAACC,GACfC,aAAaC,QAAQ,QAASC,KAAKC,UAAUJ,KAYjDK,qBAAU,YARO,WACb,IAAMV,EAAQM,aAAaK,QAAQ,SAC/BX,GACAC,EAASO,KAAKI,MAAMZ,IAMxBa,KACD,IAGH,IAiBMC,EAAU,WA5CG,IAACC,EA6ChBjB,IA7CgBiB,EA6CI,CAChBC,GAlBGhB,EAAMiB,OAASjB,EAAMA,EAAMiB,OAAS,GAAGD,GAAK,EAAI,EAmBnDE,KAAMpB,EACNqB,MAAM,EACNC,KAAM,IAAIC,MAhDdnB,EAAW,GAAD,mBACHF,GADG,CAENe,KAEJhB,EAAS,MAiEPuB,EAAU,SAACA,GACb,IAAMC,EAAO,IAAIF,KAAKC,GACtB,MAAM,GAAN,OAAUC,EAAKC,WAAf,YAA6BD,EAAKE,cAAlC,OAAiDF,EAAKC,YAAc,GAAK,KAAO,KAAhF,YAAwFD,EAAKD,UAA7F,YAA0GC,EAAKG,WAA/G,YAA6HH,EAAKI,gBAGtI,OACI,qBAAKC,UAAU,MAAf,SACI,0BAASA,UAAW,YAApB,UACI,oBAAIA,UAAW,6BAAf,wBACA,sBAAKA,UAAW,YAAhB,UACI,uBAAOA,UAAW,QAASb,MAAOjB,EAAO+B,UA3CvC,SAACC,GACG,UAAdA,EAAMC,KACNjB,KAyCuEkB,SAhD9D,SAACF,GACd/B,EAAS+B,EAAMG,OAAOlB,QAgDHmB,YAAa,SACpB,wBAAQN,UAAW,SAAUd,QAASA,EAAtC,yBAEJ,qBAAKc,UAAW,iCAAhB,SACI,6BAEQ5B,EAAMmC,KAAI,SAACC,GAAD,OACN,+BACI,sBAAKR,UAAWQ,EAAKjB,KAAO,YAAc,OAA1C,UACI,sBAAML,QAAS,YA/B/B,SAACE,GACjB,IAAMqB,EAAerC,EAAMsC,QAAO,SAACF,GAAD,OAA6BA,EAAKpB,KAAOA,KAC3E,GAAIqB,EAAapB,OAAQ,CACrB,IAAMsB,EAAQvC,EAAMwC,QAAQH,EAAa,IACnCI,EAAezC,EACrByC,EAAaF,GAAOpB,MAAQsB,EAAaF,GAAOpB,KAChDjB,EAAW,YAAIuC,KA0BiBC,CAAYN,EAAKpB,KADrB,SAEIoB,EAAKlB,OACT,+BAAOI,EAAQc,EAAKhB,WAExB,sBAAMQ,UAAW,SAAUd,QAAS,WAzCjD,IAACE,IA0C2BoB,EAAKpB,GAzChDd,EAAWF,EAAMsC,QAAO,SAACF,GAAD,OAA6BA,EAAKpB,KAAOA,OAwCrC,wBAPKoB,EAAKpB,iBCpG/B2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6cefb33b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\n\ninterface ToDoListInterface {\n    id: number,\n    todo: string,\n    done: boolean,\n    time: Date\n}\n\n\nfunction App() {\n\n    // Input State\n    const [input, setInput] = useState(\"\");\n    // Todos list state\n    const [todos, setTodos] = useState<Array<ToDoListInterface>>([]);\n\n    // Custom setter function\n    const todoSetter = (data: Array<ToDoListInterface>) => {\n        setTodos(data);\n        saveTodos(data);\n    };\n\n    // Insert single todo-item\n    const insertTodo = (value: ToDoListInterface) => {\n        todoSetter([\n            ...todos,\n            value\n        ]);\n        setInput(\"\");\n    };\n\n    // Saves todo_list in localstorage\n    const saveTodos = (item: Array<ToDoListInterface>) => {\n        localStorage.setItem(\"todos\", JSON.stringify(item),)\n    };\n\n    // Gets todo_list from localstorage\n    const getTodos = () => {\n        const todos = localStorage.getItem(\"todos\");\n        if (todos) {\n            setTodos(JSON.parse(todos))\n        }\n    };\n\n    // On Component 1st render get todos from localstore\n    useEffect(() => {\n        getTodos()\n    }, []);\n\n    // Last index\n    const getLastIndex = () => {\n        return todos.length ? todos[todos.length - 1].id + 1 : 0;\n    };\n\n    // Input Change Event Handler\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setInput(event.target.value)\n    };\n\n    // Input Key Down Event Handler\n    const onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") {\n            onClick()\n        }\n    };\n\n    // Button click event\n    const onClick = () => {\n        input && insertTodo({\n            id: getLastIndex(),\n            todo: input,\n            done: false,\n            time: new Date()\n        });\n    };\n\n    // Delete todo event\n    const deleteTodo = (id: number) => {\n        todoSetter(todos.filter((each: ToDoListInterface) => each.id !== id));\n    };\n\n    // Set Todo done\n    const setTodoDone = (id: number) => {\n        const searchedTodo = todos.filter((each: ToDoListInterface) => each.id === id);\n        if (searchedTodo.length) {\n            const index = todos.indexOf(searchedTodo[0]);\n            const updatedTodos = todos;\n            updatedTodos[index].done = !updatedTodos[index].done;\n            todoSetter([...updatedTodos]);\n        }\n    };\n\n    // Get Date\n    const getDate = (getDate: Date) => {\n        const date = new Date(getDate);\n        return `${date.getHours()}:${date.getMinutes()}${date.getHours() >= 12 ? \"pm\" : \"am\"} ${date.getDate()}/${date.getMonth()}/${date.getFullYear()}`\n    };\n\n    return (\n        <div className=\"App\">\n            <section className={\"todo-list\"}>\n                <h3 className={'header-title todo-list-div'}>To Do List</h3>\n                <div className={\"input-box\"}>\n                    <input className={\"input\"} value={input} onKeyDown={onKeyDown} onChange={onChange}\n                           placeholder={\"Todo\"}/>\n                    <button className={'button'} onClick={onClick}>Add Todo</button>\n                </div>\n                <div className={\"todo-list-div todo-list-div-ul\"}>\n                    <ul>\n                        {\n                            todos.map((each: ToDoListInterface) =>\n                                <li key={each.id}>\n                                    <div className={each.done ? \"todo done\" : \"todo\"}>\n                                        <span onClick={() => {\n                                            setTodoDone(each.id)\n                                        }}>{each.todo}</span>\n                                        <span>{getDate(each.time)}</span>\n                                    </div>\n                                    <span className={\"delete\"} onClick={() => {\n                                        deleteTodo(each.id)\n                                    }}> Delete </span>\n                                </li>)\n                        }\n                    </ul>\n                </div>\n            </section>\n        </div>\n    );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}